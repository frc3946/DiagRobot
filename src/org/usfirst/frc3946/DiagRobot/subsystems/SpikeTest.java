// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc3946.DiagRobot.subsystems;
import org.usfirst.frc3946.DiagRobot.RobotMap;
import org.usfirst.frc3946.DiagRobot.commands.*;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.command.Subsystem;
/**
 *
 */
public class SpikeTest extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    Relay spike1 = RobotMap.spikeTestSpike1;
    Relay spike2 = RobotMap.spikeTestSpike2;
    Relay spike3 = RobotMap.spikeTestSpike3;
    Relay spike4 = RobotMap.spikeTestSpike4;
    Relay spike5 = RobotMap.spikeTestSpike5;
    Relay spike6 = RobotMap.spikeTestSpike6;
    Relay spike7 = RobotMap.spikeTestSpike7;
    Relay spike8 = RobotMap.spikeTestSpike8;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    int currentSpike = 0;
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    
    public void increment() {
        if(currentSpike <= 8) {
            currentSpike++;
        } else {
            currentSpike = 1;
        }
        switch(currentSpike) {
            case 1:
                spike7.set(Relay.Value.kReverse);
                spike8.set(Relay.Value.kOff);
                spike1.set(Relay.Value.kOn);
                break;
            case 2:
                spike8.set(Relay.Value.kReverse);
                spike1.set(Relay.Value.kOff);
                spike2.set(Relay.Value.kOn);
                break;
            case 3:
                spike1.set(Relay.Value.kReverse);
                spike2.set(Relay.Value.kOff);
                spike3.set(Relay.Value.kOn);
                break;
            case 4:
                spike2.set(Relay.Value.kReverse);
                spike3.set(Relay.Value.kOff);
                spike4.set(Relay.Value.kOn);
                break;
            case 5:
                spike3.set(Relay.Value.kReverse);
                spike4.set(Relay.Value.kOff);
                spike5.set(Relay.Value.kOn);
                break;
            case 6:
                spike4.set(Relay.Value.kReverse);
                spike5.set(Relay.Value.kOff);
                spike6.set(Relay.Value.kOn);
                break;
            case 7:
                spike5.set(Relay.Value.kReverse);
                spike6.set(Relay.Value.kOff);
                spike7.set(Relay.Value.kOn);
                break;
            case 8:
                spike6.set(Relay.Value.kReverse);
                spike7.set(Relay.Value.kOff);
                spike8.set(Relay.Value.kOn);
                break;
        }
    }
}
